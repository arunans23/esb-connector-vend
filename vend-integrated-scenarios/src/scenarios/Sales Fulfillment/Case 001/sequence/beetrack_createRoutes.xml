<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->
<!--Create routes in Beetrack and create delivery-notes for those in Billomat -->
<sequence xmlns="http://ws.apache.org/ns/synapse" name="beetrack-createRoutesSeq">
    <!--Call vend-setItemArray sequence to construct the item array -->
    <sequence key="vend-setItemArray"/>

    <property name="items" expression="json-eval($.beetrack)"/>
    <payloadFactory media-type="json">
        <format>{
            "dispatches": [{
            "identifier": "$1",
            "contact_name": "$2",
            "contact_address": "$3",
            "contact_phone": "$4",
            "contact_email": "$5",
            "estimated_at":"$6",
            "tags":[
            {
            "name": "vend_saleId",
            "value": "$7"
            },
            {
            "name": "vend_userName",
            "value": "$8"
            },
            {
            "name": "vend_saleDate",
            "value": "$9"
            }],
            "items":$10
            }]
            }
        </format>
        <args>
            <arg expression="get-property('vend.customerId')"/>
            <arg expression="get-property('vend.customerName')"/>
            <arg expression="get-property('vend.customerAddress')"/>
            <arg expression="get-property('vend.customerContactNo')"/>
            <arg expression="get-property('vend.customerEmail')"/>
            <arg expression="get-property('beetrack.dispatchDate')"/>
            <arg expression="get-property('vend.salesId')"/>
            <arg expression="get-property('vend.userName')"/>
            <arg expression="get-property('vend.saleDate')"/>
            <arg expression="get-property('items')"/>
        </args>
    </payloadFactory>
    <property name="beetrack.dispatch" expression="json-eval($.dispatches)"/>

    <!--Call beetrack connector createRoute method to create a route -->
    <beetrack.init>
        <apiUrl>{$ctx:beetrack.apiUrl}</apiUrl>
        <accessToken>{$ctx:beetrack.accessToken}</accessToken>
    </beetrack.init>
    <beetrack.createRoute>
        <truckIdentifier>{$ctx:beetrack.truckIdentifier}</truckIdentifier>
        <date>{$ctx:beetrack.dispatchDate}</date>
        <dispatches>{$ctx:beetrack.dispatch}</dispatches>
    </beetrack.createRoute>
    <property name="beetrack.routeId" expression="json-eval($.response.route_id)"/>

    <!-- START: Append the response message according to the createRoute response and proceed with the delivery-note -->
    <filter source="boolean(get-property('beetrack.routeId'))" regex="false">
        <then>
            <property name="id" expression="fn:concat('vend_salesId:',get-property('vend.salesId'))"/>
            <property name="status" value="error"/>
            <property name="message" expression="json-eval($)"/>
            <call-template target="responseHandlerTemplate">
                <with-param name="id" value="{$ctx:id}"/>
                <with-param name="activity" value="beetrack_createRoute"/>
                <with-param name="status" value="{$ctx:status}"/>
                <with-param name="message" value="{$ctx:message}"/>
            </call-template>
        </then>
        <else>
            <property name="id"
                      expression="fn:concat('vend_salesId:',get-property('vend.salesId'),',beetrack_routeId:',get-property('beetrack.routeId'))"/>
            <property name="status" value="success"/>
            <property name="message" value="A route has been successfully created for the delivery."/>
            <call-template target="responseHandlerTemplate">
                <with-param name="id" value="{$ctx:id}"/>
                <with-param name="activity" value="beetrack_createRoute"/>
                <with-param name="status" value="{$ctx:status}"/>
                <with-param name="message" value="{$ctx:message}"/>
            </call-template>

            <!-- START: Process only if the clientID is existing -->
            <filter source="boolean(get-property('billomat.clientId'))" regex="true">
                <then>
                    <sequence key="vend-setItemArray"/>
                    <property name="billomat.deliveryNoteItems" expression="json-eval($.deliveryNotes)"/>

                    <!--Call billomat connector createDeliveryNote method to create a delivery-note -->
                    <billomat.init>
                        <apiUrl>{$ctx:billomat.apiUrl}</apiUrl>
                        <apiKey>{$ctx:billomat.apiKey}</apiKey>
                        <format>json</format>
                    </billomat.init>
                    <billomat.createDeliveryNote>
                        <clientId>{$ctx:billomat.clientId}</clientId>
                        <address>{$ctx:vend.customerAddress}</address>
                        <date>{$ctx:beetrack.dispatchDate}</date>
                        <title>{$ctx:title}</title>
                        <introduction>{$ctx:introduction}</introduction>
                        <invoiceId>{$ctx:uri.var.billomat.invoiceId}</invoiceId>
                        <deliveryNoteItems>{$ctx:billomat.deliveryNoteItems}</deliveryNoteItems>
                    </billomat.createDeliveryNote>
                    <property name="uri.var.billomat.deliveryNoteItemId" expression="json-eval($.delivery-note.id)"/>

                    <!-- START: Append the response message according to the createDeliveryNote response and proceed with the completion of the delivery-note -->
                    <filter source="boolean(get-property('uri.var.billomat.deliveryNoteItemId'))" regex="false">
                        <then>
                            <property name="id" expression="fn:concat('vend_salesId:',get-property('vend.salesId'))"/>
                            <property name="status" value="error"/>
                            <property name="message" expression="json-eval($)"/>
                            <call-template target="responseHandlerTemplate">
                                <with-param name="activity" value="billomat_createDeliveryNote"/>
                                <with-param name="id" value="{$ctx:id}"/>
                                <with-param name="status" value="{$ctx:status}"/>
                                <with-param name="message" value="{$ctx:message}"/>
                            </call-template>
                        </then>
                        <else>

                            <!--API method to complete the created delivery-note -->
                            <header name="Content-Type" value="application/json" scope="transport"/>
                            <header name="Accept" value="application/json" scope="transport"/>
                            <call>
                                <endpoint>
                                    <http method="put"
                                          uri-template="{uri.var.billomat.apiUrl}/api/delivery-notes/{uri.var.billomat.deliveryNoteItemId}/complete?api_key={uri.var.billomat.apiKey}"/>
                                </endpoint>
                            </call>

                            <!-- START: Append the response message according to the completeDeliveryNote method response and proceed with the sending of the delivery-note -->
                            <filter source="$axis2:HTTP_SC" regex="200">
                                <then>
                                    <property name="vend.deliveryNoteSub"
                                              expression="fn:concat(get-property('vend.companyName'),' - Delivery Note')"/>

                                    <!--Construct the email of the delivery-note -->
                                    <script language="js">
                                        <![CDATA[
                                  var saleDate = mc.getProperty('vend.saleDate').split(" ")[0];
                                  var customerName = mc.getProperty('vend.customerFirstName');
                                  var companyName = mc.getProperty('vend.companyName');
                                  var deliveryNoteBody = "Dear "+customerName+",\\n\\n"+"Please find the attached delivery note for the order you placed on "+saleDate+".\\n\\nThank you,\\n"+companyName;
                                  mc.setProperty("vend.deliveryNoteBody",deliveryNoteBody);
                              ]]>
                                    </script>
                                    <payloadFactory media-type="json">
                                        <format>
                                            {
                                            "email": {
                                            "recipients":{
                                            "to":"$1"
                                            },
                                            "subject": "$2",
                                            "body": "$3"
                                            }
                                            }
                                        </format>
                                        <args>
                                            <arg expression="get-property('vend.customerEmail')"/>
                                            <arg expression="get-property('vend.deliveryNoteSub')"/>
                                            <arg expression="get-property('vend.deliveryNoteBody')"/>
                                        </args>
                                    </payloadFactory>

                                    <!--API method to send the created delivery-note -->
                                    <header name="Content-Type" value="application/json" scope="transport"/>
                                    <header name="Accept" value="application/json" scope="transport"/>
                                    <call>
                                        <endpoint>
                                            <http method="post"
                                                  uri-template="{uri.var.billomat.apiUrl}/api/delivery-notes/{uri.var.billomat.deliveryNoteItemId}/email?api_key={uri.var.billomat.apiKey}"/>
                                        </endpoint>
                                    </call>
                                    <!-- START: Append the response message according to the sendDeliveryNote response -->
                                    <filter source="$axis2:HTTP_SC" regex="200">
                                        <then>
                                            <property name="id"
                                                      expression="fn:concat('vend_salesId:',get-property('vend.salesId'),',billomat_deliveryNoteId:',get-property('uri.var.billomat.deliveryNoteItemId'))"/>
                                            <property name="status" value="success"/>
                                            <property name="message"
                                                      value="A delivery note for the products has been successfully sent."/>
                                        </then>
                                        <else>
                                            <property name="id"
                                                      expression="fn:concat('vend_salesId:',get-property('vend.salesId'),',billomat_deliveryNoteId:',get-property('uri.var.billomat.deliveryNoteItemId'))"/>
                                            <property name="status" value="error"/>
                                            <property name="message" expression="json-eval($.)"/>
                                        </else>
                                    </filter>
                                    <!-- END: Append the response message according to the sendDeliveryNote response -->
                                    <call-template target="responseHandlerTemplate">
                                        <with-param name="activity" value="billomat_sendDeliveryNote"/>
                                        <with-param name="id" value="{$ctx:id}"/>
                                        <with-param name="status" value="{$ctx:status}"/>
                                        <with-param name="message" value="{$ctx:message}"/>
                                    </call-template>
                                </then>
                                <else>
                                    <property name="id"
                                              expression="fn:concat('vend_salesId:',get-property('vend.salesId'))"/>
                                    <property name="status" value="error"/>
                                    <property name="message" expression="json-eval($.)"/>
                                    <call-template target="responseHandlerTemplate">
                                        <with-param name="activity" value="billomat_completeDeliveryNote"/>
                                        <with-param name="id" value="{$ctx:id}"/>
                                        <with-param name="status" value="{$ctx:status}"/>
                                        <with-param name="message" value="{$ctx:message}"/>
                                    </call-template>
                                </else>
                            </filter>
                            <!-- END: Append the response message according to the completeDeliveryNote method response and proceed with the sending of the delivery-note -->
                        </else>
                    </filter>
                    <!-- END: Append the response message according to the createDeliveryNote response and proceed with the completion of the delivery-note -->
                </then>
            </filter>
            <!-- END: Process only if the clientID is existing -->
        </else>
    </filter>
    <!-- END: Append the response message according to the createRoute response and proceed with the delivery-note -->
</sequence>