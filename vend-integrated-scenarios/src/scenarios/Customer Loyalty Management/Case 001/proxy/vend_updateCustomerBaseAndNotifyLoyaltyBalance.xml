<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->
<!-- The proxy will list the customers from Vend and add them to Mailchimp subscribers' list if they're not already part of it.
   Furthermore it will notify the customers about their loyalty balance if it has changed. -->
<proxy xmlns="http://ws.apache.org/ns/synapse" name="vend_updateCustomerBaseAndNotifyLoyaltyBalance"
       transports="https,http" statistics="disable" trace="disable" startOnLoad="true">
    <target>
        <inSequence>
            <!-- Vend Properties -->
            <property name="vend.considerSince" expression="json-eval($.vend.considerSince)"/>
            <property name="vend.fromName" expression="json-eval($.vend.fromName)"/>

            <!-- ZohoCrm Properties -->
            <property name="mailchimp.apiUrl" expression="get-property('registry', 'connectors/Mailchimp/apiUrl')"/>
            <property name="mailchimp.apiKey" expression="get-property('registry', 'connectors/Mailchimp/apiKey')"/>
            <property name="mailchimp.listName" expression="json-eval($.mailchimp.listName)"/>

            <!-- Nexmo Properties -->
            <property name="nexmo.apiUrl" expression="get-property('registry', 'connectors/Nexmo/apiUrl')"/>
            <property name="nexmo.apiSecret" expression="get-property('registry', 'connectors/Nexmo/apiSecret')"/>
            <property name="nexmo.apiKey" expression="get-property('registry', 'connectors/Nexmo/apiKey')"/>

            <!-- Common properties -->
            <property name="id.empty" value="{}"/>
            <property name="responseString" value="" scope="operation"/>

            <!-- START: If the user has not provided the last modified date, keep a default of 7 previous days. -->
            <filter source="boolean(get-property('vend.considerSince'))" regex="false">
                <then>
                    <script language="js">
                        <![CDATA[
                     // 604800000 - 7 days in milliseconds
                     mc.setProperty('vend.considerSince', new java.text.SimpleDateFormat('yyyy-MM-dd hh:mm:ss').format(new java.util.Date(new java.util.Date().getTime() - 604800000)));
                  ]]>
                    </script>
                </then>
            </filter>
            <!-- END: If the user has not provided the last modified date, keep a default of 7 previous days. -->

            <!-- List all the people who were created/modified after the 'considerSince' date. -->
            <vend.init/>
            <vend.listCustomers>
                <since>{$ctx:vend.considerSince}</since>
            </vend.listCustomers>
            <sequence key="removeResponseHeaders"/>

            <property name="vend.apiUrl" expression="get-property('registry', 'connectors/Vend/apiUrl')"/>
            <property name="vend.accessToken" expression="get-property('registry', 'connectors/Vend/accessToken')"/>

            <property name="customerCount" expression="count(//customers)"/>

            <!-- START: Proceed only if there are any customers to process. -->
            <filter xpath="get-property('customerCount') > 0.0">
                <then>
                    <!--The script mediator will construct the array of subscribers to update. -->
                    <script language="js">
                        <![CDATA[
                     // Construct the email array to add to the subscribers' list in Mailchimp.
                     var customers = mc.getPayloadJSON().customers;
                     var batchEmailString = '';    
                     
                     var noOfCustomers = customers.length;
                     if(noOfCustomers > 0){
                        for(var i=0; i<noOfCustomers; i++){
                           var email = customers[i].email;
                           if(email != null && email != ''){
                              batchEmailString = batchEmailString + '{ "email": { "email": "' + email + '" }, "email_type": "text" }';
                              if(i < noOfCustomers-1){
                                 batchEmailString = batchEmailString + ', ';
                              }
                           }
                        }
                        batchEmailString = '[' + batchEmailString + ']';
                     }
                     mc.setProperty('mailchimp.batchEmailString', batchEmailString);
                     
                     // Set the current date to a property for later use.
                     mc.setProperty('vend.currentDate', new java.text.SimpleDateFormat('yyyy-MM-dd').format(new java.util.Date()));
                  ]]>
                    </script>

                    <property name="customerIndex" expression="0" scope="operation"/>

                    <!--FOR EACH Customer: BEGIN -->
                    <iterate continueParent="false" id="customers" expression="//customers" sequential="true">
                        <target>
                            <sequence>
                                <property name="vend.customerId" expression="//customers/id/text()"/>
                                <property name="vend.customerLoyalityEnabled"
                                          expression="//customers/enable_loyalty/text()"/>
                                <property name="vend.customerLoyalityBalance"
                                          expression="//customers/loyalty_balance/text()"/>
                                <property name="vend.customerPreviousLoyality"
                                          expression="//customers/custom_field_1/text()"/>
                                <property name="vend.customerMobile" expression="//customers/mobile/text()"/>
                                <property name="vend.customerFirstName" expression="//customers/first_name/text()"/>
                                <property name="vend.customerLastName" expression="//customers/last_name/text()"/>
                                <property name="vend.customerName"
                                          expression="fn:concat(get-property('vend.customerFirstName'), ' ', get-property('vend.customerLastName'))"/>

                                <!-- START: Proceed only if the customer has loyalty enabled. -->
                                <filter source="get-property('vend.customerLoyalityEnabled')" regex="1">
                                    <then>
                                        <!-- Verify whether the customer's loyalty balance has changed since last notification. -->
                                        <script language="js">
                                            <![CDATA[
                                    var customerLoyalityBalance = mc.getProperty('vend.customerLoyalityBalance');
                                    var customerPreviousLoyality = mc.getProperty('vend.customerPreviousLoyality');
                                    var customerFirstName = mc.getProperty('vend.customerFirstName');
                                    var currentDate = mc.getProperty('vend.currentDate');
                                    var fromName = mc.getProperty('vend.fromName');                                          
                                    
                                    var proceed = 'false';
                                    
                                    if(customerPreviousLoyality == ''){
                                       if(customerLoyalityBalance > 0){
                                          proceed = 'true';
                                       }
                                    } else {
                                       if(!(new java.lang.Double(customerPreviousLoyality).equals(new java.lang.Double(customerLoyalityBalance)))){
                                          proceed = 'true';
                                       }
                                    }
                                    mc.setProperty('proceed', proceed);
                                    
                                    if(proceed == 'true'){
                                       var message = 'Hi ' + customerFirstName + ', Your loyalty balance as of ' + currentDate + ' is USD ' + new java.lang.Double(customerLoyalityBalance) + '! Please visit your nearest outlet to redeem the points. Thank you for shopping with us - ' + fromName + '.';
                                       mc.setProperty('nexmo.message', message);
                                    }
                                 ]]>
                                        </script>

                                        <!-- START: Proceed if there is a change in the loyalty balance of the customer. -->
                                        <filter source="get-property('proceed')" regex="true">
                                            <then>
                                                <!-- Notify customer about the change in loyalty balance. -->
                                                <nexmo.init>
                                                    <responseType>json</responseType>
                                                    <apiUrl>{$ctx:nexmo.apiUrl}</apiUrl>
                                                    <apiSecret>{$ctx:nexmo.apiSecret}</apiSecret>
                                                    <apiKey>{$ctx:nexmo.apiKey}</apiKey>
                                                </nexmo.init>
                                                <nexmo.sendMessage>
                                                    <to>{$ctx:vend.customerMobile}</to>
                                                    <text>{$ctx:nexmo.message}</text>
                                                    <from>{$ctx:vend.fromName}</from>
                                                    <type>text</type>
                                                </nexmo.sendMessage>
                                                <sequence key="removeResponseHeaders"/>

                                                <property name="sendMessage.errorMessage"
                                                          expression="json-eval($.messages[0].error-text)"/>

                                                <property name="id"
                                                          expression="fn:concat('vend_customerId:', get-property('vend.customerId'))"/>
                                                <!-- START: Proceed to update the custom field of the customer only if the SMS has been successfully sent. -->
                                                <filter source="boolean(get-property('sendMessage.errorMessage'))"
                                                        regex="false">
                                                    <then>
                                                        <call-template target="responseHandlerTemplate">
                                                            <with-param name="activity" value="nexmo_notifyCustomer"/>
                                                            <with-param name="id" value="{$ctx:id}"/>
                                                            <with-param name="status" value="success"/>
                                                            <with-param name="message"
                                                                        value="Customer has been notified about his/her loyalty balance."/>
                                                        </call-template>

                                                        <!-- Update the custom field of the customer so that he is not mistakenly considered again. -->
                                                        <vend.init>
                                                            <apiUrl>{$ctx:vend.apiUrl}</apiUrl>
                                                            <accessToken>{$ctx:vend.accessToken}</accessToken>
                                                        </vend.init>
                                                        <vend.updateCustomer>
                                                            <customField1>{$ctx:vend.customerLoyalityBalance}
                                                            </customField1>
                                                            <customerId>{$ctx:vend.customerId}</customerId>
                                                        </vend.updateCustomer>
                                                        <sequence key="removeResponseHeaders"/>

                                                        <property name="vend.updatedCustomerId"
                                                                  expression="json-eval($.customer.id)"/>

                                                        <!-- START: Send a message to the customer only if the update fails -->
                                                        <filter source="boolean(get-property('vend.updatedCustomerId'))"
                                                                regex="false">
                                                            <then>
                                                                <property name="errorResponse"
                                                                          expression="json-eval($)"/>
                                                                <property name="status" value="error"/>
                                                                <call-template target="responseHandlerTemplate">
                                                                    <with-param name="activity"
                                                                                value="vend_updateCustomer"/>
                                                                    <with-param name="id" value="{$ctx:id}"/>
                                                                    <with-param name="status" value="error"/>
                                                                    <with-param name="message"
                                                                                value="{$ctx:errorResponse}"/>
                                                                </call-template>
                                                            </then>
                                                        </filter>
                                                        <!-- END: Send a message to the customer only if the update fails -->

                                                    </then>
                                                    <else>
                                                        <property name="status" value="error"/>
                                                        <call-template target="responseHandlerTemplate">
                                                            <with-param name="activity" value="nexmo_notifyCustomer"/>
                                                            <with-param name="id" value="{$ctx:id}"/>
                                                            <with-param name="status" value="error"/>
                                                            <with-param name="message"
                                                                        value="{$ctx:sendMessage.errorMessage}"/>
                                                        </call-template>
                                                    </else>
                                                </filter>
                                                <!-- END: Proceed to update the custom field of the customer only if the SMS has been successfully sent. -->

                                            </then>
                                        </filter>
                                        <!-- END: Proceed if there is a change in the loyalty balance of the customer. -->

                                    </then>
                                </filter>
                                <!-- END: Proceed only if the customer has loyalty enabled. -->

                                <!--Increment the customerIndex Count by 1 -->
                                <property name="customerIndex"
                                          expression="get-property('operation', 'customerIndex') + 1"
                                          scope="operation"/>

                                <filter xpath="get-property('customerCount') = get-property('operation', 'customerIndex')">
                                    <then>
                                        <!-- START: Terminate the scenario if there are no new people in 'Vend' to add to the subscribers' list. -->
                                        <filter source="boolean(get-property('mailchimp.batchEmailString'))"
                                                regex="false">
                                            <then>
                                                <call-template target="responseHandlerTemplate">
                                                    <with-param name="activity"
                                                                value="mailchimp_addPeopleToSubscribersList"/>
                                                    <with-param name="id" value="{$ctx:id.empty}"/>
                                                    <with-param name="status" value="skipped"/>
                                                    <with-param name="message"
                                                                value="There are no new people in 'Vend' to add to the subscribers' list."/>
                                                </call-template>
                                                <loopback/>
                                            </then>
                                        </filter>
                                        <!-- END: Terminate the scenario if there are no new people in 'Vend' to add to the subscribers' list. -->

                                        <!-- List the subscribers' list which match the provided list name -->
                                        <mailchimp.init>
                                            <apiUrl>{$ctx:mailchimp.apiUrl}</apiUrl>
                                            <apiKey>{$ctx:mailchimp.apiKey}</apiKey>
                                            <format>json</format>
                                        </mailchimp.init>
                                        <mailchimp.listSubscriberLists>
                                            <listName>{$ctx:mailchimp.listName}</listName>
                                            <sortField>created</sortField>
                                            <sortDirection>DESC</sortDirection>
                                        </mailchimp.listSubscriberLists>
                                        <sequence key="removeResponseHeaders"/>

                                        <property name="mailchimp.listCount" expression="count(//data)"/>

                                        <!-- START: Proceed only if at least one list is returned. -->
                                        <filter source="get-property('mailchimp.listCount')" regex="0.0">
                                            <then>
                                                <call-template target="responseHandlerTemplate">
                                                    <with-param name="activity" value="mailchimp_getSubscribersList"/>
                                                    <with-param name="id" value="{$ctx:id.empty}"/>
                                                    <with-param name="status" value="Skipped"/>
                                                    <with-param name="message"
                                                                value="There are no subscribers' list that match the name."/>
                                                </call-template>
                                            </then>
                                            <else>
                                                <property name="mailchimp.listId" expression="//data[1]/id/text()"/>

                                                <!-- Subscribe people to list -->
                                                <mailchimp.init>
                                                    <apiUrl>{$ctx:mailchimp.apiUrl}</apiUrl>
                                                    <apiKey>{$ctx:mailchimp.apiKey}</apiKey>
                                                    <format>json</format>
                                                </mailchimp.init>
                                                <mailchimp.addSubscribersToList>
                                                    <listId>{$ctx:mailchimp.listId}</listId>
                                                    <batch>{$ctx:mailchimp.batchEmailString}</batch>
                                                    <doubleOptin>false</doubleOptin>
                                                    <updateExisting>true</updateExisting>
                                                </mailchimp.addSubscribersToList>
                                                <sequence key="removeResponseHeaders"/>

                                                <property name="mailchimp.addCount"
                                                          expression="json-eval($.add_count)"/>
                                                <property name="id"
                                                          expression="fn:concat('mailchimp_subscribersListId:', get-property('mailchimp.listId'))"/>
                                                <filter xpath="get-property('mailchimp.addCount') &gt; 0">
                                                    <then>
                                                        <property name="status" value="success"/>
                                                        <property name="message"
                                                                  expression="fn:concat(get-property('mailchimp.addCount'), ' subscriber(s) have been added to the list.')"/>
                                                    </then>
                                                    <else>
                                                        <property name="status" value="skipped"/>
                                                        <property name="message"
                                                                  value="All customers are already members of the subscribers' list."/>
                                                    </else>
                                                </filter>

                                                <call-template target="responseHandlerTemplate">
                                                    <with-param name="activity"
                                                                value="mailchimp_addCustomersToSubscribersList"/>
                                                    <with-param name="id" value="{$ctx:id}"/>
                                                    <with-param name="status" value="{$ctx:status}"/>
                                                    <with-param name="message" value="{$ctx:message}"/>
                                                </call-template>
                                                <property name="mailchimp.errorCount"
                                                          expression="json-eval($.error_count)"/>

                                                <filter xpath="get-property('mailchimp.errorCount') &gt; 0">
                                                    <then>
                                                        <property name="message" expression="json-eval($.errors)"/>
                                                        <call-template target="responseHandlerTemplate">
                                                            <with-param name="activity"
                                                                        value="mailchimp_addPeopleToSubscribersList"/>
                                                            <with-param name="id" value="{$ctx:id}"/>
                                                            <with-param name="status" value="error"/>
                                                            <with-param name="message" value="{$ctx:message}"/>
                                                        </call-template>
                                                    </then>
                                                </filter>

                                            </else>
                                        </filter>
                                        <!-- END: Proceed only if at least one list is returned. -->

                                        <loopback/>
                                    </then>
                                </filter>

                            </sequence>
                        </target>
                    </iterate>
                    <!--FOR EACH Customer - END -->
                </then>
                <else>
                    <property name="skipMessage"
                              expression="fn:concat('There are no customers created/modified since ', get-property('vend.considerSince'), '.')"/>
                    <!-- Append a skip message to be sent to the user if there aren't any products to be processed. -->
                    <call-template target="responseHandlerTemplate">
                        <with-param name="activity" value="vend_updateCustomerBaseAndNotifyLoyaltyBalance"/>
                        <with-param name="id" value="{$ctx:id.empty}"/>
                        <with-param name="status" value="skipped"/>
                        <with-param name="message" value="{$ctx:skipMessage}"/>
                    </call-template>
                    <loopback/>
                </else>
            </filter>
            <!-- END: Proceed only if there are any customers to process. -->
        </inSequence>
        <outSequence>
            <!-- Send the constructed response to the user. -->
            <payloadFactory media-type="json">
                <format>
                    {
                    "Response":{
                    "process":"vend_updateCustomerBaseAndNotifyLoyaltyBalance",
                    "activityResponse": [$1]
                    }
                    }
                </format>
                <args>
                    <arg expression="get-property('operation', 'responseString')"/>
                </args>
            </payloadFactory>
            <send/>
        </outSequence>
    </target>
</proxy>